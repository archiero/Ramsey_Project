#from setup import *
from __future__ import division
import datetime
import os
import itertools as it
import shutil
import random
import copy
import numpy as np
import pandas as pd
import math 
import pycuda.driver as cuda
import pycuda.autoinit
from collections import Counter
from pycuda.compiler import SourceModule
import pycuda.gpuarray as gpuarray

def main_random(Ramsey, num_vertices, num_steps, beta=2):
    start_time = datetime.datetime.now()
    print()

    def choose(n,k):
        return int(math.factorial(n)/math.factorial(k)/math.factorial(n-k))
    #The theory for this function comes from the Lesser Paper. Theorem 7 there provides very useful lower-bounds 
    #for the number of red edges found 
    def min_red_edges(Ramsey, num_vertices):
        sorted_Ramsey = np.sort(Ramsey)
        k = sorted_Ramsey[1]
        if len(sorted_Ramsey) != 2 or sorted_Ramsey[0] != 3:
            return(0)
        elif num_vertices <=2*k:
            return(num_vertices-k)
        elif num_vertices <= 5*k/2:
            return(3*num_vertices - 5*k)
        else:
            return(5*num_vertices - 10*k)
    min_red = min_red_edges(Ramsey, num_vertices)
    num_colors = len(Ramsey)
    Colors = np.arange(num_colors)
    Vertices = np.arange(num_vertices)
    Edges = list(it.combinations(Vertices,2))
    #reverse lookup for edges below.  Eg if slot 3 above contains edge (2,5), the the dict below has entry (2,5):3
    Edges_idx = dict((edge, idx) for idx,edge in enumerate(Edges)) 
    num_edges = len(Edges)

    threads_per_block = 1024
    vertices_per_clique = Ramsey
    edges_per_clique = np.array([choose(v,2) for v in vertices_per_clique])
    cliques_per_color = np.asarray([choose(num_vertices,v) for v in vertices_per_clique])
    blocks_per_color = np.ceil(cliques_per_color / threads_per_block).astype('uint32')
    num_blocks = blocks_per_color.sum()
    cliques_per_block = np.ceil(cliques_per_color / blocks_per_color).astype('uint32')
    #The objects below tells each block which color and how many cliques/edges it will monitor.
    #Note each vector is repetitive.  If color 0 gets 7 blocks, the first 7 entries will be the same
    block_color = np.repeat(Colors,blocks_per_color).astype('uint32')
    block_num_cliques = np.repeat(cliques_per_block,blocks_per_color).astype('uint32')
    block_edges_per_clique = np.repeat(edges_per_clique,blocks_per_color).astype('uint32')
    
    #The object below assigns each block to a list of cliques.  For simplicity while
    #we construct a single matrix with a lot of unused entries.
    #For example, edges_per_clique is different for blocks monitoring different colors.
    #We could make a more complex structure that handles this (see old stable version)
    #but that makes it harder to pass to the GPU.  Instead, we simply fill all "invalid"
    #unused entries with the placeholder "num_edges", which is 1 more the the largest
    #legal edge_idx (because Python indexes [0,1,2,...,num_edges-1]).
    #When we color later, we color these slots with the placeholder num_colors.
    assign_Blocks_to_Cliques = np.full([num_blocks,cliques_per_block.max(),edges_per_clique.max()],
                                       fill_value=num_edges, dtype='uint32')

    #Counters that that tracks the next open block and thread on each block
    next_open_block = 0    
    next_open_thread = np.zeros(num_blocks,dtype='int')
    for color, clique_size in enumerate(Ramsey):
        #Creates a generator to produce all cliques (the list of vertices).
        Cliques = it.combinations(Vertices,clique_size)

        #Makes the vector [0,1,2,...,num_blocks-1,0,1,2,...,num_blocks-1,....] of length num_cliques
        assign_Cliques_to_Blocks = np.arange(cliques_per_color[color]) % blocks_per_color[color]
        #randomizes assignment, but maintains clique counts
        np.random.shuffle(assign_Cliques_to_Blocks)
        #Starts at next open block
        assign_Cliques_to_Blocks += next_open_block
        
        for clique_Vertices, block in zip(Cliques,assign_Cliques_to_Blocks):
            #Gets the list of edges in this clique
            clique_Edges = list(it.combinations(clique_Vertices,2))
            #Converts it to edge_idx
            clique_Edges_idx = [Edges_idx[edge] for edge in clique_Edges]
            #Writes it to the correct block and next open thread on that block
            assign_Blocks_to_Cliques[block,next_open_thread[block],:edges_per_clique[color]] = clique_Edges_idx            
            next_open_thread[block] += 1
        next_open_block += blocks_per_color[color]
    
    #Code below sets up the GPU checker
    block_color_gpu = gpuarray.to_gpu(block_color)
    #block_num_cliques = gpuarray.to_gpu(block_num_cliques)
    block_edges_per_clique_gpu = gpuarray.to_gpu(block_edges_per_clique)
    assign_Blocks_to_Cliques_gpu = gpuarray.to_gpu(assign_Blocks_to_Cliques)    

    kernel_code ="""
    #include <stdio.h>
    __global__ void find_problems(int *block_color, int *edges_per_clique, int *edges, int *coloring, int *Problems, int edges_per_thread, int cliques)
    {
        __shared__ int shared_coloring[shared_size];
        int color = block_color[blockIdx.x];
        int clique_idx = blockIdx.x*blockDim.x + threadIdx.x;
        if(threadIdx.x < shared_size)
        {
            shared_coloring[threadIdx.x] = coloring[threadIdx.x];
        }
        if(clique_idx < cliques)
        {
            //This weird way of starting and stopping allows us to traverse the 3D-array of assign_Blocks_to_Cliques easily
            int start = clique_idx*edges_per_thread;
            int end = start + edges_per_clique[blockIdx.x];
            int e = start;
            while((e < end) && (shared_coloring[edges[e]] == color))
            {
                e++;
            }
            //Problems[clique_idx] = 0;
            //(e >= end) ? atomicAdd(Problems[clique_idx],int 1) : atomicAdd(Problems[clique_idx],int 0);
            Problems[clique_idx] = (e >= end) ? 1 : 0;
        }
    }
    """
    
    regex_fixing_dictionary = {"shared_size":(num_edges+1)}

    for key, val in regex_fixing_dictionary.items():
        kernel_code = kernel_code.replace(str(key),str(val))
    mod = SourceModule(kernel_code)
    G, B, edges_per_thread = assign_Blocks_to_Cliques_gpu.shape
    edges_per_thread = np.uint32(edges_per_thread)
    print("#blocks = gridDim.x = %d, cliques per block = threads per block = blockDim.x = %d, edges per thread = %d"%(G,B,edges_per_thread))
    func = mod.get_function("find_problems")
    def find_problems_cuda(coloring_gpu, printout=False, get_from_gpu=False):
        func(block_color_gpu, block_edges_per_clique_gpu, assign_Blocks_to_Cliques_gpu, coloring_gpu, Problems_gpu, edges_per_thread, np.uint32(cliques_per_color.sum()), block=(B,1,1), grid=(G,1), shared=0)
        if printout == True:
            get_from_gpu = True
        if get_from_gpu == True:
            #print("getting from gpu")
            Problems_cpu = Problems_gpu.get()
            #cuda.memcpy_dtoh_async(Problems_gpu, Problems_cpu)
            if printout == True:
                print_problems(Problems_cpu)
        else:
            Problems_cpu = []
        return gpuarray.sum(Problems_gpu).get().astype('uint32'), Problems_cpu
    
    #The code below setups the serial version of this algorithm in pandas on the CPU.
    #It is much slower than the gpu version, but can be used in the absence of a GPU
    #and to verify that the algorithms give the same answers.
    #We msut create the "comparison" array.  This is a bit complicated.
    #We will discuss 2 arrays: compare and the coloring array.
    #First, recall that num_colors is one larger than the biggest legal color since
    #Python indexes [0,1,...,num_colors-1]
    #Now, fix a block and let c = block_color[block].
    #Consider the [block, clique, edge] entry of compare.  It equals:
    #c IF edge < num_edges_per_clique for that block
    #num_colors IF clique >= num_edges_per_clique for that block
    #Why?  In general there are extra rows and columns not associated to a valid edge.
    #When we color the graph later, they are filled with num_colors.
    #We do NOT want the "space fillers" to affect problem count.
    #In the extra rows, we see [c,c,...,c,num_colors,num_colors,...,num_colors] in compare
    #But in the coloring array, all entries will equal num_colors.
    #Thus, it is NOT counted as a problem because the first several slots disagree.
    #Thus, these extra rows can NEVER counts as problems cliques, as desired.
    #Now, consider the extra columns.  All entries will equal num_colors.  This is true
    #for BOTH compare AND the coloring array.  Thus, a row counts as a problem
    #if and only if the first num_edges_per_clique "valid" entries also match.
    #Thus the extra columns do NOT alter the "problem status" for valid rows, as desired.

    #compare = np.full_like(assign_Blocks_to_Cliques, fill_value=num_colors)
    #print(assign_Blocks_to_Cliques.shape)
    #for block in range(num_blocks):
    #    compare[block,:,:block_edges_per_clique[block]] = block_color[block]
    #
    #def find_problems_pandas(coloring, printout=False):
    #    X = coloring[assign_Blocks_to_Cliques]
    #    Y = (X == compare)
    #    Problems = np.all(Y,axis=-1)
    #    if printout == True:
    #        print_problems(Problems)
    #    return Problems.sum().astype('int'), Problems

    def print_problems(Problems):        
        Z = pd.DataFrame(Problems.astype('uint32'))
        Z.insert(0,'problems',Z.sum(axis=1))
        Z.insert(0,'color',block_color)
        Z = Z.T
        problem_idx = np.any(Z,axis=-1)
        problem_idx[:2] = True
        display(Z.ix[problem_idx,:])

    def print_status():
        now = datetime.datetime.now()
        elapsed = now - start_time
        print("%d steps done in %s.  Best coloring so far was step %d with %d problems.  Time now %s."
                   %(step,str(elapsed).split('.')[0],step_best,num_problems_best,str(now).split('.')[0]))
    def increase_red_edges():
        while(list(coloring_cpu).count(red)<min_red):
            idx = [i for i in range(len(coloring_cpu)) if coloring_cpu[i]!=red]
            coloring_cpu[random.choice(idx)] = red
    #Initialize the Markov chain
    coloring_cpu = np.random.choice(Colors, size=num_edges+1, replace=True).astype('uint32')
    coloring_cpu[num_edges] = num_colors
    #Recall this last slot holds is a placeholder to handlge "extra" slots.  See discussion
    #of serial pandas algorithm above.
    coloring_best = coloring_cpu.copy()
    coloring_gpu = gpuarray.to_gpu(coloring_cpu.copy())
    
    #Problems_current = np.zeros(assign_Blocks_to_Cliques.shape[:-1]).astype('uint32')    
    #Problems_gpu = gpuarray.GPUArray(assign_Blocks_to_Cliques.shape[:-1],dtype='uint32')
    Problems_gpu = gpuarray.to_gpu(np.zeros(assign_Blocks_to_Cliques.shape[:-1]).astype("uint32"))

    #num_problems_current, Problems_current = find_problems_pandas(coloring_cpu, printout=False)
    #num_problems_current, Problems_current = find_problems_cuda(coloring_gpu, get_from_gpu=True, printout=False)
    num_problems_current, _ = find_problems_cuda(coloring_gpu, get_from_gpu=False, printout=False)    
    num_problems_proposed = num_problems_current    
    num_problems_best = num_problems_current
    #Problems_proposed = Problems_current.copy()
    #Problems_best = Problems_current.copy()
    red = min(vertices_per_clique)
    step = 0
    step_best = step
    
    loop_length = 100000
    loop_step = 0
    loops_done = 0
    start_compute = datetime.datetime.now()
    for i in range(num_steps):
        if num_problems_best == 0:
            break
        
        edge_idx = np.random.randint(0,num_edges)
        color_delta = np.random.randint(1,num_colors)
        edge_color_old = coloring_cpu[edge_idx]
        #edge_color_new = (edge_color_old + color_Deltas[i]) % num_colors
        edge_color_new = (edge_color_old + color_delta) % num_colors
        coloring_cpu[edge_idx] = edge_color_new
        if(list(coloring_cpu).count(red) < min_red):
            increase_red_edges()    
        coloring_gpu.set(coloring_cpu)

#         The code below check the pandas and cuda versions against each other.
#         It is commented out by default because it slows things down.
#         If you want to use it, you also need to uncomment several lines above to activate the pandas algorithm.

        #num_problems_proposed, Problems_proposed_pandas = find_problems_pandas(coloring_cpu)#, printout=True)
        #num_problems_proposed, Problems_proposed_cuda = find_problems_cuda(coloring_gpu, get_from_gpu=True, printout=False)
        #if np.all(Problems_proposed_pandas == Problems_proposed_cuda) == True:
        #    print("Pandas and Cuda agree!!")
        #else:
        #    raise Exception("Pandas and Cuda disagree :()")
            
        num_problems_proposed, _ = find_problems_cuda(coloring_gpu, get_from_gpu=False, printout=False)
        num_problems_diff = num_problems_current - num_problems_proposed
        if num_problems_diff >= 0:
             #print("Proposed is better.  Accepting.")            
            num_problems_current = num_problems_proposed
            #Problems_current = Problems_proposed.copy()
            if num_problems_proposed < num_problems_best:
                step_best = step
                coloring_best = coloring_cpu.copy()
                num_problems_best = num_problems_proposed
                #Problems_best = Problems_proposed.copy()
                print_status()
        else:            
            accept = np.exp(beta * num_problems_diff)            
            r = np.random.random()
            #print("Proposed is worse.  But I will accept it anyway if I draw a number less than %.3f.  I drew %.3f." % (accept,r))            
            if r <= accept:            
                #print("So I accept the move even though it is worse.")                
                num_problems_current = num_problems_proposed
                #Problems_current = Problems_proposed.copy()
            else:                
                #print("So I reject.")
                coloring_cpu[edge_idx] = edge_color_old
        step += 1
        loop_step += 1
        if(loop_step >= loop_length):
            loops_done += 1
            loop_step = 0
            print_status()
            compute_time = (datetime.datetime.now() - start_compute).seconds + (datetime.datetime.now() - start_compute).days*60*60*24
            steps_done = loops_done*loop_length
            rate = steps_done / compute_time
            job_time = (num_steps-steps_done)/rate
            m, s = divmod(job_time,60)
            h, m = divmod(m,60)
            d, h = divmod(h,24)
            y, d = divmod(d,365)
            print("At %.0f colorings/second, it'll take me %d years %d days %d hours %d minutes and %d seconds to complete the remaining steps."%
                  (rate,y,d,h,m,s))

    print("FINISHED!!")
    coloring_cpu = coloring_best.copy()
    coloring_gpu.set(coloring_best)
    num_problems_best, _   = find_problems_cuda(coloring_gpu, get_from_gpu=False, printout=False)
    
    print()
    print_status()
    final_coloring = pd.DataFrame()
    final_coloring['edge'] = Edges
    final_coloring['color'] = coloring_best[:num_edges]
    #display(final_coloring)
    return final_coloring
Ramsey = [5,5]
num_vertices = 43
num_steps = 5*(10**7) 
bill = main_random(Ramsey,num_vertices, num_steps)
